name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
        compiler: [gcc, clang]
        build_tool: [cmake, bazel]

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    - name: Install Tools (macOS)
      if: runner.os == 'macOS'
      run: |
        if [ "${{ matrix.build_tool }}" = "cmake" ]; then
          brew install cmake
        fi

        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc
        fi

    - name: Setup Bazel
      if: matrix.build_tool == 'bazel'
      env:
          BAZEL_VERSION: "3.3.1"
      run: |
        if [[ "${{ matrix.os }}" == "macOS-latest" ]]; then
          OS=darwin
        else
          sysctl kernel.unprivileged_userns_clone=1
          sudo apt-get update -q
          sudo apt-get install libxml2-utils -y
          OS=linux
        fi

        URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-${OS}-x86_64.sh"

        wget -O install.sh "${URL}"
        chmod +x install.sh
        ./install.sh --user
        rm -f install.sh

        cat .bazelrc.ci >> .bazelrc

    - name: Set Environment
      run: |
        if [ "${{ matrix.build_tool }}" = "cmake" ]; then
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "::set-env name=CC::gcc"
            echo "::set-env name=CXX::g++"
          else
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          fi
        else
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            echo "::set-env name=CC::g++"
          else
            echo "::set-env name=CC::clang++"
          fi
        fi

    - name: Checkout Submodules
      run: |
        git submodule update --init --recursive --recommend-shallow

    - name: Build and Test (CMake)
      if: matrix.build_tool == 'cmake'
      run: |
        cmake -S . -B build-cmake
        cmake --build build-cmake
        cd build-cmake && GTEST_COLOR=1 ctest --verbose

    - name: Build and Test (Bazel)
      if: matrix.build_tool == 'bazel'
      run: |
        bazel build -- //:logger //:reader
        bazel test //...

  format:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Install clang-format
      run: |
        sudo apt-get install -y clang-format

    - name: Run clang-format
      run: |
        clang-format --version
        find include src tests \(  -name "*.cc" -o -name "*.h" \) -exec clang-format -i {} \;
        git update-index --really-refresh
        git --no-pager diff
